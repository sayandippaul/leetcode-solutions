class Solution {
public:
 int find(vector<int>& nums,int l,int r){
        int m=(l+r)/2;
        cout<<l<<r<<" mid"<<m<<endl;
        if(l==r){
            return r;
        }
        int a=find(nums,l,m);
        int b=find(nums,m+1,r);
        cout<<a<<b<<min(a,b)<<endl;
        // 
        if(nums[a]>nums[b]){
            return a;
            
        }
        else{
            return b;
        }
        // return max(a,b);

    }

    int findPeakElement(vector<int>& nums) {
         return find(nums,0,nums.size()-1);
    }
};

second soln   



class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l=0;
        int r=nums.size()-1;
        if(r==0) return r;
        if(nums[r]>nums[r-1]) return r; 
        if(nums[0]>nums[1]) return 0; 
        int c=-1;
        l=l+1;
        
        r=r-1;
        while(l<=r){
            int m=(l+r)/2;
            if(nums[m-1]<nums[m] && nums[m]>nums[m+1]){
                return m;
            }
            if(nums[m-1]<nums[m] && nums[m]<nums[m+1]){
                // sorted and strictly increasing
                // shift to right
                l=m+1;
            }
            else{
                // shift to left
                r=m-1;
            }
            
        }
        return -1;
    }
};
